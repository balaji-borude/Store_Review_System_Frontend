// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// schema 
// user Schema 

// ----------------------
// MODELS
// ----------------------

// roles 
enum Role {
  User
  Admin
  StoreOwner
}


model User {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(60)
  email       String    @unique
  password    String
  address     String?   @db.VarChar(400)
  role        Role      @default(User)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  stores      Store[]   @relation("OwnerStores") // stores owned if role=STORE_OWNER
  ratings     Rating[]  // ratings submitted by this user
}

model Store {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(60)
  email       String    @unique
  address     String    @db.VarChar(400)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  ownerId     Int?
  owner       User?     @relation("OwnerStores", fields: [ownerId], references: [id])
  ratings     Rating[]
}

model Rating {
  id          Int       @id @default(autoincrement())
  score       Int       @db.SmallInt // 1 to 5
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  userId      Int
  storeId     Int
  user        User      @relation(fields: [userId], references: [id])
  store       Store     @relation(fields: [storeId], references: [id])

  @@unique([userId, storeId]) // A user can rate a store only once
}